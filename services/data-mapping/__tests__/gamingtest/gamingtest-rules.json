{
  "@context": {
    "todo": "define_the_rules_context"
  },
  "graph": [
    {
      "id": "mmr:rule-0",
      "sourcePath": "Experience Name",
      "targetClass": "soo:Experience",
      "targetProperty": "id",
      "targetFunction": "fno:generateId"
    },
    {
      "id": "mmr:rule-1",
      "sourcePath": "Experience Name",
      "targetClass": "soo:Experience",
<<<<<<< HEAD
<<<<<<< HEAD
      "targetProperty": "skos:prefLabel",
=======
      "targetProperty": "soo:Label",
>>>>>>> 75371fa (spec: add tests for gamingtest transformation)
=======
      "targetProperty": "soo:Label", #pourquoi une majuscule sur une propriété ?
>>>>>>> 331eb2b (Ajout de commentaires)
      "targetLang": "en",
      "targetFunction": "fno:asIs_WithLang"
    },
    {
      "id": "mmr:rule-2",
      "sourcePath": "User ID",
<<<<<<< HEAD
      "targetClass": "soo:Profile",
<<<<<<< HEAD
      "targetProperty": "soo:email",
      "generateId": "true",
      "relationTo": "soo:Experience",
      "relationName": "soo:experience",
      "relationNameInverse": "soo:profile"
=======
=======
      "targetClass": "soo:Profile", #pourquoi n'utilise-t-on pas plutôt shema.org/person ?
>>>>>>> 331eb2b (Ajout de commentaires)
      "targetProperty": "email",
      "generateId": "true",
      "relationTo": "soo:Experience",
      "relationName": "soo:containsExperience", #Pourquoi pas soo:experience ? permet de limiter le nombre de classes
      "relationNameInverse": "soo:hasProfile"
>>>>>>> 75371fa (spec: add tests for gamingtest transformation)
    },

    {
      "id": "mmr:rule-3",
      "sourcePath": "Date",
      "targetClass": "soo:Experience",
<<<<<<< HEAD
      "targetProperty": "soo:dateFrom",
=======
      "targetProperty": "date",
>>>>>>> 75371fa (spec: add tests for gamingtest transformation)
      "targetFunction": "fno:date-to-xsd"
    },

    {
      "id": "mmr:rule-4",
      "sourcePath": "Associated Soft Skill Block",
      "targetClass": "soo:Skill",# tout à fait pour le fait de n'avoir qu'une classe Skill, il faudra juste rajouter un type "skill block" en propriété
      "generateId": "true",
<<<<<<< HEAD
      "targetFunction": "fno:search-for-mapping-with-source", 
      "relationTo": "soo:Experience",
      "relationName": "soo:experience",
      "relationNameInverse": "soo:skill"
=======
      "targetFunction": "fno:search-for-mapping-with-source",
      
      "relationTo": "soo:Experience",
<<<<<<< HEAD
      "relationName": "soo:resultFromExperience",
      "relationNameInverse": "soo:hasSkill"
>>>>>>> 75371fa (spec: add tests for gamingtest transformation)
=======
      "relationName": "soo:resultFromExperience", #Pourquoi pas soo:experience ? permet de limiter le nombre de classes
      "relationNameInverse": "soo:hasSkill" #Pourquoi pas soo:skill ? permet de limiter le nombre de classes
>>>>>>> 331eb2b (Ajout de commentaires)
    },

    {
      "id": "mmr:rule-5",
      "sourcePath": "Results",
<<<<<<< HEAD
      "targetClass": "soo:Skill",
      "targetProperty": "soo:skillLevelValue",
=======
      "targetClass": "soo:Experience",
      "targetProperty": "result",
>>>>>>> 75371fa (spec: add tests for gamingtest transformation)
      "targetFunction": "fno:as-is"
    }

    
  ]
}