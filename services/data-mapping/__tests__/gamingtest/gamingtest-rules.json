{
  "@context": {
    "todo": "define_the_rules_context"
  },
  "graph": [
    {
      "id": "mmr:rule-0",
      "sourcePath": "Experience Name",
      "targetClass": "soo:Experience",
      "targetProperty": "id",
      "targetFunction": "fno:generateId"
    },
    {
      "id": "mmr:rule-1",
      "sourcePath": "Experience Name",
      "targetClass": "soo:Experience",
      "targetProperty": "soo:label",
      "targetLang": "en",
      "targetFunction": "fno:asIs_WithLang"
    },
    {
      "id": "mmr:rule-2",
      "sourcePath": "User ID",
      "targetClass": "soo:Profile", #pourquoi n'utilise-t-on pas plutôt shema.org/person ?
      "targetProperty": "email",
      "generateId": "true",
      "relationTo": "soo:Experience",
      "relationName": "soo:containsExperience", #Pourquoi pas soo:experience ? permet de limiter le nombre de classes
      "relationNameInverse": "soo:hasProfile"
    },

    {
      "id": "mmr:rule-3",
      "sourcePath": "Date",
      "targetClass": "soo:Experience",
      "targetProperty": "date",
      "targetFunction": "fno:date-to-xsd"
    },

    {
      "id": "mmr:rule-4",
      "sourcePath": "Associated Soft Skill Block",
      "targetClass": "soo:Skill",# tout à fait pour le fait de n'avoir qu'une classe Skill, il faudra juste rajouter un type "skill block" en propriété
      "generateId": "true",
      "targetFunction": "fno:search-for-mapping-with-source",
      
      "relationTo": "soo:Experience",
      "relationName": "soo:resultFromExperience", #Pourquoi pas soo:experience ? permet de limiter le nombre de classes
      "relationNameInverse": "soo:hasSkill" #Pourquoi pas soo:skill ? permet de limiter le nombre de classes
    },

    {
      "id": "mmr:rule-5",
      "sourcePath": "Results",
      "targetClass": "soo:Experience",
      "targetProperty": "result",
      "targetFunction": "fno:as-is"
    }

    
  ]
}